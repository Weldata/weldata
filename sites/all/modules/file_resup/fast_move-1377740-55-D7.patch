diff --git a/includes/file.inc b/includes/file.inc
index fb26856..4d3fc3c 100644
--- a/includes/file.inc
+++ b/includes/file.inc
@@ -879,13 +879,15 @@ function file_valid_uri($uri) {
  *   - FILE_EXISTS_RENAME - Append _{incrementing number} until the filename is
  *       unique.
  *   - FILE_EXISTS_ERROR - Do nothing and return FALSE.
+ * @param $fast_move
+ *   Internal use only. Used by file_unmanaged_move() to attempt a fast move.
  *
  * @return
  *   The path to the new file, or FALSE in the event of an error.
  *
  * @see file_copy()
  */
-function file_unmanaged_copy($source, $destination = NULL, $replace = FILE_EXISTS_RENAME) {
+function file_unmanaged_copy($source, $destination = NULL, $replace = FILE_EXISTS_RENAME, &$fast_move = FALSE) {
   $original_source = $source;
   $original_destination = $destination;
 
@@ -942,11 +944,27 @@ function file_unmanaged_copy($source, $destination = NULL, $replace = FILE_EXIST
   }
   // Make sure the .htaccess files are present.
   file_ensure_htaccess();
-  // Perform the copy operation.
-  if (!@copy($source, $destination)) {
+
+  // If $fast_move is TRUE, it means that this function was called by
+  // file_unmanaged_move() and that we should attempt to move the file instead
+  // of copying it, using rename(). This is only possible if source and
+  // destination schemes are the same. If rename() cannot be used, we tell
+  // file_unmanaged_move() by reverting $fast_move to FALSE and perform a normal
+  // copy.
+  $operation = 'copy';
+  if ($fast_move) {
+    if (file_uri_scheme($source) == file_uri_scheme($destination)) {
+      $operation = 'rename';
+    }
+    else {
+      $fast_move = FALSE;
+    }
+  }
+  // Perform the copy (or rename) operation.
+  if (!@$operation($source, $destination)) {
     // If the copy failed and realpaths exist, retry the operation using them
     // instead.
-    if ($real_source === FALSE || $real_destination === FALSE || !@copy($real_source, $real_destination)) {
+    if ($real_source === FALSE || $real_destination === FALSE || !@$operation($real_source, $real_destination)) {
       watchdog('file', 'The specified file %file could not be copied to %destination.', array('%file' => $source, '%destination' => $destination), WATCHDOG_ERROR);
       return FALSE;
     }
@@ -1105,8 +1123,12 @@ function file_move(stdClass $source, $destination = NULL, $replace = FILE_EXISTS
  * @see file_move()
  */
 function file_unmanaged_move($source, $destination = NULL, $replace = FILE_EXISTS_RENAME) {
-  $filepath = file_unmanaged_copy($source, $destination, $replace);
-  if ($filepath == FALSE || file_unmanaged_delete($source) == FALSE) {
+  // Attempt a fast move by asking file_unmanaged_copy() to use rename()
+  // instead of copy(). If not possible, fall back to the default copy-delete
+  // solution.
+  $fast_move = TRUE;
+  $filepath = file_unmanaged_copy($source, $destination, $replace, $fast_move);
+  if ($filepath == FALSE || !$fast_move && file_unmanaged_delete($source) == FALSE) {
     return FALSE;
   }
   return $filepath;
