<?php
/**
* @file
* Weldata Weld Cost Estimator Module.
*/
//Todo: Use 'safe_value' instead of 'value' for getting variables value or use check_plain
//Todo: Complete weldata_node_view() in weldata.view.inc
//Todo: Change field_suffix value in database
//Todo: Use $radius instead of $diameter in plug and slot welds
//Todo: Move field_get_items from weld_calculator to their respective calculation functions
//Todo: Remove module_load_include and use classes for auto-loading using files[] array in .info file


//For Compound Vee Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.compound_vee');
//For Double Bevel Corner Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.double_bevel_corner');
//For Double Bevel CornerTee Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.double_bevel_tee');
//For Double Vee Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.double_vee');
//For Fillet Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.fillet');
//For J Groove Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.j_groove');
//For Patch and Cavity Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.patch_cavity');
//For Pipe Clad Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.pipe_clad');
//For Plug Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.plug');
//For Single Vee Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.single_vee');
//For Single Bevel Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.single_bevel');
//For Slot Weight of Weld Calculations
module_load_include('inc', 'weldata_wce', 'calculators/weldata_wce.slot');


/**
 * Function to Calculate
 */
function weldata_wce_calculator($entity_type, $entity){

  //Entity Metadata Wrapper to get Field Collection Values
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  //Common Variables
  //$unit = field_get_items($entity_type, $entity, 'field_unit')[0]['value'];
  $type_of_weld = field_get_items($entity_type, $entity, 'field_type_of_weld')[0]['value'];
  $filler_density = field_get_items($entity_type, $entity, 'field_filler_density')[0]['value'];
  $number_of_joints = field_get_items($entity_type, $entity, 'field_number_of_joints')[0]['value'];

  $labour_rate = field_get_items($entity_type, $entity, 'field_labour_rate')[0]['value'];
  $filler_cost = field_get_items($entity_type, $entity, 'field_filler_cost')[0]['value'];
  $wire_diameter = field_get_items($entity_type, $entity, 'field_wire_diameter')[0]['value'];
  $wire_feed_speed = field_get_items($entity_type, $entity, 'field_wire_feed_speed')[0]['value'];
  $gas_cost = field_get_items($entity_type, $entity, 'field_gas_cost')[0]['value'];
  $gas_flow = field_get_items($entity_type, $entity, 'field_gas_flow')[0]['value'];
  $process_efficiency = (field_get_items($entity_type, $entity, 'field_process_efficiency')[0]['value'])/100;
  $welder_efficiency = (field_get_items($entity_type, $entity, 'field_welder_efficiency')[0]['value'])/100;
  $amperage = field_get_items($entity_type, $entity, 'field_amperage')[0]['value'];
  $voltage = field_get_items($entity_type, $entity, 'field_voltage')[0]['value'];
  $power_cost = field_get_items($entity_type, $entity, 'field_power_cost')[0]['value'];
  $throat = field_get_items($entity_type, $entity, 'field_throat');

/**
 * Variable Declarations for Fillet Welds
 */
 switch($type_of_weld) {
    case "fillet":
    $weight_of_weld = weldata_wce_fillet_weld($wrapper, $filler_density, $number_of_joints);
	break;
	
	case "groove":
    $type_of_groove_weld = $wrapper->field_groove_weld->field_type_of_groove_weld->value();
  	switch($type_of_groove_weld){
    case "single_v":
	     $weight_of_weld = weldata_wce_single_vee($wrapper, $filler_density, $number_of_joints);
	break;
	case "single_bevel":
	    $weight_of_weld = weldata_single_bevel($wrapper,$filler_density,$number_of_joints);
	break;
	case "compound_v":
   $weight_of_weld = weldata_compound_vee($wrapper,$filler_density,$number_of_joints);
	break;
	case "double_v":
    $weight_of_weld = weldata_double_vee($wrapper,$filler_density,$number_of_joints);
	break;
	case "j_groove":
    $weight_of_weld = weldata_j_groove($wrapper,$filler_density,$number_of_joints);
	break;
  	} 
	break;//End of groove weld
	case "fillet_groove":
    $type_of_fillet_groove_weld = $wrapper->field_fillet_groove_weld->field_type_of_fillet_groove_weld->value();
    switch($type_of_fillet_groove_weld){
		case "double_bevel_tee":
    $weight_of_weld = weldata_double_bevel_tee($wrapper,$filler_density,$number_of_joints);
		break;
	    case "double_bevel_corner":
		$weight_of_weld = weldata_double_bevel_corner($wrapper,$filler_density,$number_of_joints);
		break;
	}
	break; //End of Fillet and Groove Weld
	case "plug_slot":
    $type_of_plug_weld = $wrapper->field_plug_slot_weld->field_type_of_plug_weld->value();
	   switch($type_of_plug_weld){
	     case "plug":
		  $weight_of_weld = weldata_wce_plug($wrapper,$filler_density,$number_of_joints);
		 break;
		 case "slot":
    $weight_of_weld = weldata_slot($wrapper,$filler_density,$number_of_joints);
		 break;
	   }
	break; //End of plug_slot
	
	case "patch": //Implementation of "OR" statement in switch
	case "cavity":
  $weight_of_weld = weldata_patch_cavity($wrapper,$filler_density,$number_of_joints);
	break;
	case "pipe_clad":
   $weight_of_weld = weldata_pipe_clad($wrapper,$filler_density,$number_of_joints);
	break;
 }

  $deposition_rate = M_PI * (($wire_diameter * $wire_diameter)/4) * ($wire_feed_speed * 60) * $filler_density;
  $weight_of_filler_required = $weight_of_weld / ($process_efficiency);
  $arc_on_hours = $weight_of_weld / ($process_efficiency * $deposition_rate);
  $labour_hours = $arc_on_hours / ($welder_efficiency /100);
  $total_filler_cost = $weight_of_filler_required * $filler_cost;
  $labour_cost = $labour_hours * $labour_rate;
  $total_gas_cost = $arc_on_hours * $gas_flow * $gas_cost;
  $total_power_cost = ($voltage * $amperage * $arc_on_hours * $power_cost) / 1000;
  $total_cost = $total_filler_cost + $labour_cost + $total_gas_cost + $total_power_cost;

  $GLOBALS['result'] = array(
    'unit' => 'imperial',
    'weight_of_weld' => $weight_of_weld,
    'weight_of_filler_required' => $weight_of_filler_required,
    'arc_on_hours' => $arc_on_hours,
    'labour_hours' => $labour_hours,
    'total_filler_cost' => $total_filler_cost,
    'labour_cost'=> $labour_cost,
    'total_gas_cost'=> $total_gas_cost,
    'total_power_cost'=> $total_power_cost,
    'total_cost' => $total_cost
  );
  return $GLOBALS['result'];
}

/**
 *Implements Calculation for Weight of Weld
 */
function computed_field_field_weight_of_weld_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  weldata_wce_calculator($entity_type, $entity);
  $entity_field[0]['value'] = $GLOBALS['result']['weight_of_weld'];
}
function computed_field_field_weight_of_filler_required_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['weight_of_filler_required'];
}
function computed_field_field_arc_on_hours_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['arc_on_hours'];
}
function computed_field_field_labour_hours_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['labour_hours'];
}
function computed_field_field_total_filler_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_filler_cost'];
}
function computed_field_field_labour_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['labour_cost'];
}
function computed_field_field_total_gas_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_gas_cost'];
}
function computed_field_field_total_power_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_power_cost'];
}
function computed_field_field_total_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_cost'];
}

/**
 *Implements Display for Computed Field
 */
function computed_field_field_weight_of_weld_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  weldata_wce_calculator('node',$entity);
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">kg</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">lbs</span>';
}
function computed_field_field_weight_of_filler_required_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">kg</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">lbs</span>';
}
function computed_field_field_arc_on_hours_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
    return $entity_field_item['value'].'<span class="field-suffix">hrs</span>';
}
function computed_field_field_labour_hours_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
    return $entity_field_item['value'].'<span class="field-suffix">hrs</span>';
}
function computed_field_field_total_filler_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_labour_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_total_gas_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_total_power_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_total_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}