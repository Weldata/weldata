<?php
/**
* @file
* Weldata Module.
*/
//Todo: Complete weldata_node_view() in weldata.view.inc
//Todo: Change field_suffix value in database
//Todo: Use $radius instead of $diameter in plug and slot welds
//Todo: Move field_get_items from weld_calculator to their respective calculation functions

//For Compound Vee Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.compound_vee');
//For Double Bevel Corner Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.double_bevel_corner');
//For Double Bevel CornerTee Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.double_bevel_tee');
//For Double Vee Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.double_vee');
//For Fillet Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.fillet');
//For J Groove Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.j_groove');
//For Patch and Cavity Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.patch_cavity');
//For Pipe Clad Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.pipe_clad');
//For Plug Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.plug');
//For Single Vee Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.single_vee');
//For Single Bevel Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.single_bevel');
//For Slot Weight of Weld Calculations
module_load_include('inc', 'weldata', 'includes/weldata.slot');

/**
 * Implements hook_hook_info().
 * Moves form_alter functions to weldata.form.inc
 * Moves node_view functions to weldata.view.inc
 */
function weldata_hook_info() {
  $hooks['form_alter'] = array(
    'group' => 'form',
  );
  $hooks['node_view'] = array(
    'group' => 'view',
  );
  return $hooks;
}

/**
 * Function to Calculate
 */
function weldata_calculator($entity_type, $entity){
  //Common Variables
  $unit = field_get_items($entity_type, $entity, 'field_unit')[0]['value'];
  $type_of_weld = field_get_items($entity_type, $entity, 'field_type_of_weld')[0]['value'];
  $type_of_groove_weld = field_get_items($entity_type, $entity, 'field_type_of_groove_weld')[0]['value'];
  $type_of_fillet_groove_weld = field_get_items($entity_type, $entity, 'field_type_of_fillet_groove_weld')[0]['value'];
  $type_of_plug_weld = field_get_items($entity_type, $entity, 'field_type_of_plug_weld')[0]['value'];
  $weld_length = field_get_items($entity_type, $entity, 'field_weld_length')[0]['value'];
  $number_of_joints = field_get_items($entity_type, $entity, 'field_number_of_joints')[0]['value'];
  $size_variation = (field_get_items($entity_type, $entity, 'field_size_variation')[0]['value'])/100;
  $filler_density = field_get_items($entity_type, $entity, 'field_filler_density')[0]['value'];


  $labour_rate = field_get_items($entity_type, $entity, 'field_labour_rate')[0]['value'];
  $filler_cost = field_get_items($entity_type, $entity, 'field_filler_cost')[0]['value'];
  $wire_diameter = field_get_items($entity_type, $entity, 'field_wire_diameter')[0]['value'];
  $wire_feed_speed = field_get_items($entity_type, $entity, 'field_wire_feed_speed')[0]['value'];
  $gas_cost = field_get_items($entity_type, $entity, 'field_gas_cost')[0]['value'];
  $gas_flow = field_get_items($entity_type, $entity, 'field_gas_flow')[0]['value'];
  $process_efficiency = (field_get_items($entity_type, $entity, 'field_process_efficiency')[0]['value'])/100;
  $welder_efficiency = (field_get_items($entity_type, $entity, 'field_welder_efficiency')[0]['value'])/100;
  $amperage = field_get_items($entity_type, $entity, 'field_amperage')[0]['value'];
  $voltage = field_get_items($entity_type, $entity, 'field_voltage')[0]['value'];
  $power_cost = field_get_items($entity_type, $entity, 'field_power_cost')[0]['value'];


  $throat = field_get_items($entity_type, $entity, 'field_throat');



/**
 * Variable Declarations for Fillet Welds
 */
if ($type_of_weld == 'fillet'){
  $leg_size = field_get_items($entity_type, $entity, 'field_leg_size')[0]['value'];
  $weight_of_weld = weldata_fillet_weld($weld_length,$leg_size,$filler_density,$size_variation,$number_of_joints);
}

/**
  * Variable Declarations for Groove Welds
  */
if($type_of_weld == 'groove'){
  $bevel_angle = field_get_items($entity_type, $entity, 'field_bevel_angle')[0]['value'];
  $thickness = field_get_items($entity_type, $entity, 'field_thickness')[0]['value'];
  $root_gap = field_get_items($entity_type, $entity, 'field_root_gap')[0]['value'];
  $cap_height = field_get_items($entity_type, $entity, 'field_cap_height')[0]['value'];

  if ($type_of_groove_weld == 'single_v'){
     $weight_of_weld = weldata_single_vee($weld_length,$bevel_angle,$thickness,$root_gap,$cap_height,$filler_density,$number_of_joints);
  }
  elseif($type_of_groove_weld == 'single_bevel'){
    $weight_of_weld = weldata_single_bevel($weld_length,$bevel_angle,$thickness,$root_gap,$cap_height,$filler_density,$number_of_joints);
  }
  elseif($type_of_groove_weld == 'compound_v'){
    $thickness_bottom = field_get_items($entity_type, $entity, 'field_thickness_bottom')[0]['value'];
    $bevel_angle_bottom = field_get_items($entity_type, $entity, 'field_bevel_angle_bottom')[0]['value'];
    $land_thickness = field_get_items($entity_type, $entity, 'field_land_thickness')[0]['value'];

    $weight_of_weld = weldata_compound_vee($weld_length,$thickness,$thickness_bottom,$bevel_angle,$bevel_angle_bottom,$land_thickness,$root_gap,$cap_height,$filler_density,$number_of_joints);
  }
  elseif($type_of_groove_weld == 'double_v'){
    $thickness_bottom = field_get_items($entity_type, $entity, 'field_thickness_bottom')[0]['value'];
    $bevel_angle_bottom = field_get_items($entity_type, $entity, 'field_bevel_angle_bottom')[0]['value'];
    $land_thickness = field_get_items($entity_type, $entity, 'field_land_thickness')[0]['value'];
    $cap_height_bottom = field_get_items($entity_type, $entity, 'field_cap_height_bottom')[0]['value'];
    $weight_of_weld = weldata_double_vee($weld_length,$thickness,$thickness_bottom,$bevel_angle,$bevel_angle_bottom,$land_thickness,$root_gap,$cap_height,$cap_height_bottom,$filler_density,$number_of_joints);
  }
  elseif($type_of_groove_weld == 'j_groove'){
    $extension = field_get_items($entity_type, $entity, 'field_extension')[0]['value'];
    $extension_thickness = field_get_items($entity_type, $entity, 'field_extension_thickness')[0]['value'];
    $radius = field_get_items($entity_type, $entity, 'field_radius')[0]['value'];
    $weight_of_weld = weldata_j_groove($weld_length,$extension,$extension_thickness,$thickness,$cap_height,$root_gap,$bevel_angle,$radius,$filler_density,$number_of_joints);
  }
}

/**
  * Variable Declarations for Fillet-Groove Welds
  */
if($type_of_weld == 'fillet_groove') {
  $leg_size = field_get_items($entity_type, $entity, 'field_leg_size')[0]['value'];
  $bevel_angle = field_get_items($entity_type, $entity, 'field_bevel_angle')[0]['value'];
  $bevel_angle_bottom = field_get_items($entity_type, $entity, 'field_bevel_angle_bottom')[0]['value'];
  $root_gap = field_get_items($entity_type, $entity, 'field_root_gap')[0]['value'];
  $cap_height = field_get_items($entity_type, $entity, 'field_cap_height')[0]['value'];
  $thickness = field_get_items($entity_type, $entity, 'field_thickness')[0]['value'];
  $thickness_bottom = field_get_items($entity_type, $entity, 'field_thickness_bottom')[0]['value'];
  $land_thickness = field_get_items($entity_type, $entity, 'field_land_thickness')[0]['value'];

  if($type_of_fillet_groove_weld == 'double_bevel_tee'){
    $leg_size_2 = field_get_items($entity_type, $entity, 'field_leg_size_2')[0]['value'];
    $weight_of_weld = weldata_double_bevel_tee($weld_length,$leg_size,$leg_size_2,$bevel_angle,$bevel_angle_bottom,$thickness,$thickness_bottom,$land_thickness,$root_gap,$filler_density,$number_of_joints);
  }
  elseif($type_of_fillet_groove_weld == 'double_bevel_corner'){
    $weight_of_weld = weldata_double_bevel_corner($weld_length,$leg_size,$bevel_angle,$bevel_angle_bottom,$thickness,$thickness_bottom,$land_thickness,$cap_height,$root_gap,$filler_density,$number_of_joints);
  }
}

// For Plug and Slot Weld
if($type_of_weld == 'plug_slot'){
  $diameter = field_get_items($entity_type, $entity, 'field_diameter')[0]['value'];
  if($type_of_plug_weld == 'plug'){
    $weight_of_weld = weldata_plug($weld_length,$diameter,$filler_density,$number_of_joints);
  } elseif($type_of_plug_weld == 'slot'){
    $thickness = field_get_items($entity_type, $entity, 'field_thickness')[0]['value'];
    $slot_length = field_get_items($entity_type, $entity, 'field_slot_length')[0]['value'];
    $slot_width = field_get_items($entity_type, $entity, 'field_slot_width')[0]['value'];
    $weight_of_weld = weldata_slot($thickness,$slot_length,$slot_width,$filler_density,$number_of_joints);
  }
}

// For Patch Build Up and Cavity Build Up
if($type_of_weld == 'patch' || $type_of_weld == 'cavity'){
  $top_length = field_get_items($entity_type, $entity, 'field_top_length')[0]['value'];
  $top_width = field_get_items($entity_type, $entity, 'field_top_width')[0]['value'];
  $bottom_length = field_get_items($entity_type, $entity, 'field_bottom_length')[0]['value'];
  $bottom_width = field_get_items($entity_type, $entity, 'field_bottom_width')[0]['value'];
  $height_of_patch = field_get_items($entity_type, $entity, 'field_height_of_patch')[0]['value'];
  $weight_of_weld = weldata_patch_cavity($top_length,$top_width,$bottom_length,$bottom_width,$height_of_patch,$filler_density,$number_of_joints);
}

// For Pipe Clad
if($type_of_weld == 'pipe_clad'){
   $clad_length = field_get_items($entity_type, $entity, 'field_clad_length')[0]['value'];
   $clad_thickness = field_get_items($entity_type, $entity, 'field_clad_thickness')[0]['value'];
   $diameter = field_get_items($entity_type, $entity, 'field_diameter')[0]['value'];
   $weight_of_weld = weldata_pipe_clad($clad_length,$clad_thickness,$diameter,$filler_density,$number_of_joints);
}

  $deposition_rate = M_PI * (($wire_diameter * $wire_diameter)/4) * ($wire_feed_speed * 60) * $filler_density;
  $weight_of_filler_required = $weight_of_weld / ($process_efficiency);
  $arc_on_hours = $weight_of_weld / ($process_efficiency * $deposition_rate);
  $labour_hours = $arc_on_hours / ($welder_efficiency /100);
  $total_filler_cost = $weight_of_filler_required * $filler_cost;
  $labour_cost = $labour_hours * $labour_rate;
  $total_gas_cost = $arc_on_hours * $gas_flow * $gas_cost;
  $total_power_cost = ($voltage * $amperage * $arc_on_hours * $power_cost) / 1000;
  $total_cost = $total_filler_cost + $labour_cost + $total_gas_cost + $total_power_cost;

  $GLOBALS['result'] = array(
    'unit' => $unit,
    'weight_of_weld' => $weight_of_weld,
    'weight_of_filler_required' => $weight_of_filler_required,
    'arc_on_hours' => $arc_on_hours,
    'labour_hours' => $labour_hours,
    'total_filler_cost' => $total_filler_cost,
    'labour_cost'=> $labour_cost,
    'total_gas_cost'=> $total_gas_cost,
    'total_power_cost'=> $total_power_cost,
    'total_cost' => $total_cost
  );
  return $GLOBALS['result'];
}

/**
 *Implements Calculation for Weight of Weld
 */
function computed_field_field_weight_of_weld_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  weldata_calculator($entity_type, $entity);
  $entity_field[0]['value'] = $GLOBALS['result']['weight_of_weld'];
}
function computed_field_field_weight_of_filler_required_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['weight_of_filler_required'];
}
function computed_field_field_arc_on_hours_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['arc_on_hours'];
}
function computed_field_field_labour_hours_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['labour_hours'];
}
function computed_field_field_total_filler_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_filler_cost'];
}
function computed_field_field_labour_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['labour_cost'];
}
function computed_field_field_total_gas_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_gas_cost'];
}
function computed_field_field_total_power_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_power_cost'];
}
function computed_field_field_total_cost_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = $GLOBALS['result']['total_cost'];
}
function computed_field_field_weld_length_unit_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items){
  if ($GLOBALS['result']['unit'] == 'metric'){
    $entity_field[0]['value'] = 'mm';
  } else {
    $entity_field[0]['value'] = 'inch';
  }
}

/**
 *Implements Display for Computed Field
 */
function computed_field_field_weight_of_weld_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  weldata_calculator('node',$entity);
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">kg</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">lbs</span>';
}
function computed_field_field_weight_of_filler_required_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">kg</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">lbs</span>';
}
function computed_field_field_arc_on_hours_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
    return $entity_field_item['value'].'<span class="field-suffix">hrs</span>';
}
function computed_field_field_labour_hours_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
    return $entity_field_item['value'].'<span class="field-suffix">hrs</span>';
}
function computed_field_field_total_filler_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_labour_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_total_gas_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_total_power_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_total_cost_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  if ($GLOBALS['result']['unit'] == 'metric'){
    return $entity_field_item['value'].'<span class="field-suffix">Rupees</span>';
  }
    return $entity_field_item['value'].'<span class="field-suffix">$</span>';
}
function computed_field_field_weld_length_unit_display($field, $entity_field_item, $entity_lang, $langcode, $entity) {
  return '<span class="field-suffix">'.$entity_field_item["value"].'</span>';
}